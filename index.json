[{"categories":["How-to","technology"],"content":"I started exploring and using Jupyter Notebook earlier this year for a project based on opensource enablement, licensing and operate first. This is the first time ever I was working with a notebook and apparently had to start from sratch right from understanding how it works, how it needs to be installed and finally how it is to be pushed to a repo and publish the work. In the process of exploring the tool, I went throught quite a handful of articles and videos. Everyone‚Äôs way was a bit different than the other and there was no way correct or proper to work around this. Amongst all, I found the below way to be the most effective and clean and hence thought of penning down the learnings create a how-to guide on installing and working with Jupyter Notebooks. This article is written based on a MacOS. Haven‚Äôt tried on a linux machine. Jupyter Notebook = JN //for ease of writing Prerequisites: Install python3 package ","date":"2022-06-29","objectID":"/jupyternotebooks/:0:0","tags":["JupyterNotebooks","How-to"],"title":"Getting started with Jupyter Notebooks","uri":"/jupyternotebooks/"},{"categories":["How-to","technology"],"content":"Install and launch JN First, let‚Äôs create a virtual environment to install JN parth@mac Desktop % python3 -m venv jupyter parth@mac Desktop % ls jupyter This creates a folder called jupyter in the current dir which has a python virtual env. To turn the venv on: parth@mac Desktop % source ~/jupyter/bin/activate (jupyter) parth@mac Desktop % The jupyter in parenthesis lets us know that we are in our python jupyter virtual environment. NOTE: This needs to be turned everytime you need to work with jupyter notebooks. Now, let‚Äôs install the jupyter notebook pkg (jupyter) parth@mac Desktop % pip3 install jupyter notebook This installs the jupyter and notebook packages. Creating another dir where I will be launching the JN from and where I can create pages. (jupyter) parth@mac Desktop % mkdir JupyterNotebooks (jupyter) parth@mac Desktop % cd JupyterNotebooks (jupyter) parth@mac JupyterNotebooks % pwd /Users/parth/Desktop/JupyterNotebooks Launching JN now (jupyter) parth@mac JupyterNotebooks % jupyter notebook . This runs a kernel process on the terminal and launches JN from the JupyterNotebooks dir in your default web browser. Note All and any work you do can be accessed via localhost and is saved locally. Click on the new button in the brower‚Äôs JN page to create a new page. The page can be a simple text file, a python file with .ipynb extension or markdown page with .md extention. Any pages you create are now saved in JupyterNotebooks dir. Alright, we have installed and launched JN to create the pages. Now it‚Äôs time we create a bundled book out of the pages and upload it in a git repo and publish the book. ","date":"2022-06-29","objectID":"/jupyternotebooks/:1:0","tags":["JupyterNotebooks","How-to"],"title":"Getting started with Jupyter Notebooks","uri":"/jupyternotebooks/"},{"categories":["How-to","technology"],"content":"Build and Publish the book Follow the steps mentioned here https://jupyterbook.org/en/stable/start/overview.html Install Jupyter Book pip3 install -U jupyter-book Tip Jupyter Book comes bundled with a lightweight sample book to help you understand a book‚Äôs structure. Create a sample book by running the following command: $ jupyter-book create mynewbook/ The name mynewbook can be replaced with any other name and create option will create a skeleton of book for you. Edit/add/modify the pages under this book. Once you are done with creating pages and have configured _toc.yml and _config.yml, it‚Äôs time to build the book. $ jupyter-book build mynewbook/ Use the same build option to re-build the book if you make any new changes. The book is build. Once all the final reviews are done, it can be published in the git repository. Follow the link below to publish the book online. https://jupyterbook.org/en/stable/start/publish.html Checkout some of my works based on Jupyter Notebook Opensource Enablement Opensource Licensing Thank you for reading! ","date":"2022-06-29","objectID":"/jupyternotebooks/:2:0","tags":["JupyterNotebooks","How-to"],"title":"Getting started with Jupyter Notebooks","uri":"/jupyternotebooks/"},{"categories":null,"content":"Hey there! TL;DR: Name: Parth Goswami Let‚Äôs connect on Twitter ","date":"2022-06-26","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"About the website A platform for the community, by the community VistingAuthors Many of my colleagues are avid writers who frequently document their knowledge and experiences. Some of them use their own platforms to publish the information, while others use blogs like Medium and Blogger to publish it. The VisitingAuthors area of this website is an effort to offer one such platform for authors to share their knowledge and ideas. Please check out the site; I hope it will provide you with useful content. UnconventionalContributors We have a diverse range of contributors in the open source community who make contributions in unconventional ways without using any coding or developing expertise, some ways we hear quite often, some not so much. This high-level instructional interview series should be beneficial to anyone who wants to start contributing to open source. One such forum is the UnconventionalContributors series, which is designed for aspiring and emerging contributors to get involved with open source communities. ","date":"2022-06-26","objectID":"/about/:1:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"About the author I am a Customer Enablement Engineer working for Cloudera on the Professional Services Team in Bengaluru, India. My interests are in Kubernetes, cloud, and cloud native related projects. I like to contribute to OpenSource in any possible way. The opinions stated here are my own, not necessarily those of my company. ","date":"2022-06-26","objectID":"/about/:2:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"About copyright All original articles on this site are protected by the Creative Commons Attribution-NonCommercial 4.0 License/CC BY-NC 4.0 . Copyright statement You are free to: Share ‚Äî copy and redistribute the material in any medium or format Adapt ‚Äî remix, transform, and build upon the material The licensor cannot revoke these freedoms as long as you follow the license terms. Any individual or media should abide by the following copyright requirements when reproducing the original content of this site (including text, self-made images, and photographic works): indicate reprint indicate the source as the site domain name ( parthgoswami.com ), or the full URL where the reprinted content is located NonCommercial ‚Äî You may not use the material for commercial purposes. Except for original works, most of the pictures on this site come from the Internet. The original copyright owner of such pictures may request this site to stop using relevant pictures at any time and for any reason, including pictures edited by this site (such as annotated descriptions). ","date":"2022-06-26","objectID":"/about/:3:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Stay in touch üëçüèª Get in touch with me on Twitter or send me an email. We would love to talk with you. ","date":"2022-06-26","objectID":"/about/:4:0","tags":null,"title":"About","uri":"/about/"},{"categories":["How-to","VisitingAuthors","technology"],"content":"Recently, while working on an internal project I was required to ping a Windows server from a RHEL server. Sounds easy, right? It would have been indeed, however, the task was to ping the Windows server from RHEL via ansible, and that‚Äôs where the scenario got tricky. I went through a few articles and videos on and thought of documenting my learnings in this blog. Let‚Äôs start by getting to know the host requirements. Host requirements: For Ansible to communicate to a Windows host and use Windows modules, the Windows host must meet these requirements: Ansible can generally manage Windows versions under current and extended support from Microsoft. Ansible can manage desktop OSs including Windows 7, 8.1, and 10, and server OSs including Windows Server 2008, 2008 R2, 2012, 2012 R2, 2016, and 2019. Ansible requires PowerShell 3.0 or newer and at least .NET 4.0 to be installed on the Windows host. A WinRM listener should be created and activated. Use below steps to configure: ","date":"2022-06-26","objectID":"/ansible_sd/:0:0","tags":["How-to","technology","windows","Red Hat","RHEL","ansible","VisitingAuthors"],"title":"Managing Windows Server from Red Hat Server using Ansible","uri":"/ansible_sd/"},{"categories":["How-to","VisitingAuthors","technology"],"content":"1. Configure Windows server 2016: a. Open Windows PowerShell and check the version: `PS C:\\Users\\Adminstrator\u003e Get-Host | Select-Object version` The powershell version should at least be 3.0 or more. If not then upgrade it using this document. Since we have version 5.1 no need to upgrade the version. b. Once PowerShell has been upgraded, the final step is for the WinRM service to be configured so that Ansible can connect to it: PS C:\\Users\\Administrator\u003e [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 PS C:\\Users\\Administrator\u003e $url = \"https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1\"$file = \"$env:temp\\ConfigureRemotingForAnsible.ps1\" PS C:\\Users\\Administrator\u003e (New-Object -TypeName System.Net.WebClient).DownloadFile($url, $file) PS C:\\Users\\Administrator\u003e powershell.exe -ExecutionPolicy ByPass -File $file c. Run this below script on Windows PowerShell ISE and check the version after successful script completion: Param([string]$computerName) Function enableWinRM { $result = winrm id -r:$global:compName 2\u003e$null Write-Host if ($LastExitCode -eq 0) { Write-Host \"WinRM already enabled on\" $global:compName \"...\" -ForegroundColor green } else { Write-Host \"Enabling WinRM on\" $global:compName \"...\" -ForegroundColor red .\\pstools\\psexec.exe \\\\$global:compName -s C:\\Windows\\system32\\winrm.cmd qc -quiet if ($LastExitCode -eq 0) { .\\pstools\\psservice.exe \\\\$global:compName restart WinRM $result = winrm id -r:$global:compName 2\u003e$null if ($LastExitCode -eq 0) {Write-Host 'WinRM successfully enabled!' -ForegroundColor green} else {exit 1} } else {exit 1} } } $global:compName = $computerName enableWinRM exit 0 d. Check if ports are listening: PS C:\\Users\\Administrator\u003e winrm enumerate winrm/config/Listener ","date":"2022-06-26","objectID":"/ansible_sd/:1:0","tags":["How-to","technology","windows","Red Hat","RHEL","ansible","VisitingAuthors"],"title":"Managing Windows Server from Red Hat Server using Ansible","uri":"/ansible_sd/"},{"categories":["How-to","VisitingAuthors","technology"],"content":"2. Configure Red Hat 8 Server: a. If you have subscription manager account then subscribe your system using subscription-manager command: [root@ip-172-31-23-177 ~]# subscription-manager register b. Install ansible if package is not available: [root@ip-172-31-23-177 ~]# yum install ansible c. Install python-pip package: [root@ip-172-31-23-177 ~]# pip2 --version [root@ip-172-31-23-177 ~]# pip3 --version Ôøº[root@ip-172-31-23-177 ~]# dnf install python2-pip [root@ip-172-31-23-177 ~]# dnf install python3-pip [root@ip-172-31-23-177 ~]# pip2 --version pip 9.0.3 from /usr/lib/python2.7/site-packages (python 2.7) [root@ip-172-31-23-177 ~]# pip3 --version pip 9.0.3 from /usr/lib/python3.6/site-packages (python 3.6) [root@ip-172-31-23-177 ~]# pip3 install \"pywinrm\u003e=0.2.2\" d. Now write a ansible playbook to ping windows server: [root@ip-172-31-23-177 ~]# tail /etc/ansible/hosts ## db-[99:101]-node.example.com [windows] 107.20.75.188 [windows:vars] ansible_user=Administrator ansible_password=UDJQRabMPn@%3$xYU)Y?E755XSBfm7d= ansible_connection=winrm ansible_winrm_server_cert_validation=ignore e. Use the below command to ping windows server: [root@ip-172-31-23-177 ansible]# ansible all -i hosts -m win_ping ","date":"2022-06-26","objectID":"/ansible_sd/:2:0","tags":["How-to","technology","windows","Red Hat","RHEL","ansible","VisitingAuthors"],"title":"Managing Windows Server from Red Hat Server using Ansible","uri":"/ansible_sd/"},{"categories":["How-to","VisitingAuthors","technology"],"content":"Resources: Setting up a Windows Host WinRM Setup WinRM setup script Linux and Windows host setup How to install pip in RHEL 8 / CentOS 8 step by step instructions Windows PowerShell Upgrade Ansible-windows-lab-setup (where ansible server is in linux and target node is in windows) Tip: RDP Port No: 3389 Shreya Dhange is a Technical Training Developer at Red Hat, who likes to explore and learn new technologies and share her knowledge by writing articles. She has completed her Masters in Computer Science and has gained award for her exemplary academic performance. She has been engaged in creating and delivering content in the cloud and linux space. She can be reached out LinkedIn or via email. ","date":"2022-06-26","objectID":"/ansible_sd/:3:0","tags":["How-to","technology","windows","Red Hat","RHEL","ansible","VisitingAuthors"],"title":"Managing Windows Server from Red Hat Server using Ansible","uri":"/ansible_sd/"},{"categories":["community","UnconventionalContributors"],"content":"We have many diverse contributors here at Red Hat that help upstream communities in unconventional ways that don‚Äôt require any coding or development skills. Starting with a non-code contribution can help anyone overcome the sense of failure and not being good enough, and it can also serve as a springboard for our open source adventure. This article aims to highlight some non-code open source contributions that anyone can make right now to get started contributing. For this month‚Äôs edition, we talked about the Mozilla and Wikipedia with Prathamesh Chavan. Can you tell us some background about you, what your journey has been at Red Hat, and what you do today? I am Prathamesh Chavan and I completed my engineering degree in information technology in 2016 and joined Red Hat as an intern on October 3rd, 2016. I was converted to full-time employment in 2017 and joined the Technical Chat Support team as an Associate Customer Support Specialist-Technical. As a Technical Support Engineer, I worked on queries related to subscription management, and it was in March of 2020 when I joined the then CEE Operations team as a Technical Project Coordinator. As of today, I am an Associate Technical Project Manager in the CEE Strategic Solutions team, and my day- to-day responsibilities involve managing agile projects. Share your experience in becoming a community contributor. An open source contribution is a selfless effort to do something good. After becoming an open source contributor, I was able to explore the various steps of the software development life cycle. I learned how it provides a basis for project planning, scheduling, and estimating, as well as how it raises project planning visibility among all the stakeholders. I felt very empowered and motivated due to the open source ideology, and this has helped me in building a ‚Äúnever stop, never-give-up‚Äù attitude. What project(s) have you contributed to? How did your contribution journey start? I have contributed to Mozilla projects and Wikipedia. I joined the technical club at my university as an events blogger, and it was only after that that I came to know about the various open source communities and the contribution pathways. In my initial days, I read a couple of articles in the Mozilla Developers Network portal related to the Mozilla Firefox browser and started to suggest edits wherever needed. Later, I started localizing the Mozilla articles, which were written in English, into my native language, Marathi. Over the next couple of months, I got acquainted with the Mozilla Firefox browser and started helping other users fix their issues with the browser. I also believe most open source organizations consider answering other people‚Äôs questions on Quora or Reddit to be a useful contribution. I started joining and reading discussions on threads and learned a lot through that. So, I always recommend to people that if we notice a question and know the solution, we may try to help the person who asked it by answering it, and our responses will be counted as contributions to the project. Sometimes, assuming one doesn‚Äôt know the perfect solution to the problem, simply helping others comprehend why the problem arises may be enough to allow them to come up with their own solution. You may help manage the discussion threads or community chat channels by answering questions about problems on GitHub, opensource.com, Mozilla, etc. In what way(s) have you contributed? As someone who likes talking about open source philosophies and concepts, I decided to start with a documentation-related contribution as a technical writer, where I started writing and reviewing the documentation on the Mozilla Developers Network. Later, I realized that the articles were only written in English, and there was a huge need to localize such articles in the regional languages. I started my contribution by localizing the articles and strings. Due to such contributions, I got some knowledge about how to use the Firefox brows","date":"2022-06-20","objectID":"/prathameshchavan/:0:0","tags":["blogs","community","fedora","mozilla"],"title":"Interview with Prathamesh Chavan","uri":"/prathameshchavan/"},{"categories":["VisitingAuthors","How-to","technology"],"content":"Let us create a dockerfile for deploying the application. In this dockerfile we will use ubuntu image as the base image and then install apache and php above it. Then we will create a MYSQL container which will be connected to our application. ","date":"2022-06-06","objectID":"/dockerizing_lamp_stack_app/:0:0","tags":["How-to","docker","blog","lamp stack","VisitingAuthors","technology"],"title":"Dockerizing LAMP Stack Application","uri":"/dockerizing_lamp_stack_app/"},{"categories":["VisitingAuthors","How-to","technology"],"content":"Below is the Dockerfile snippet: # Dockerfile for LAMP Stack installation # Ubuntu 18.04 image FROM ubuntu:18.04 ENV DEBIAN_FRONTEND=noninteractive RUN apt-get update -y RUN apt-get upgrade -y # Install apache RUN apt-get install -y apache2 # Prerequisites for installing php7.3 RUN apt-get install -y software-properties-common RUN add-apt-repository ppa:ondrej/php RUN apt install -y php7.3-fpm # Install php7.3 for this set up RUN apt install -y php7.3 # Extensions of php RUN apt install php7.3-common php7.3-mysql php7.3-xml php7.3-xmlrpc php7.3-curl php7.3-gd php7.3-imagick php7.3-cli php7.3-dev php7.3-imap php7.3-mbstring php7.3-opcache php7.3-soap php7.3-zip php7.3-intl -y # Removing the default index.html page and copying the project code RUN rm -f /var/www/html/index.html COPY . /var/www/html/ # Install ufw RUN apt install ufw -y RUN ufw app list # install library RUN apt-get install libapache2-mod-php7.3 # install additional packages RUN a2dismod mpm_event \u0026\u0026 a2enmod mpm_prefork \u0026\u0026 a2enmod php7.3 # Restart apache RUN service apache2 restart # Provide executable permissions to the code RUN chmod -R 0777 /var/www/html/* RUN chmod -R 0777 /var/* # Change WORKDIR WORKDIR /var/www/html CMD [\"apachectl\",\"-D\",\"FOREGROUND\"] RUN a2enmod rewrite EXPOSE 80 EXPOSE 443 In this dockerfile I have installed php 7.3 version which was required for my application. Use the below command to build the image from the dockerfile: docker build -f dockerfile-lamp-stack.dockerfile . Next let us create the containers to deploy the application. Below is the snippet of docker-compose file: version: '3' networks: lamp-stack-net: external: true volumes: mysql_storage_01: external: true services: lamp_stack: image: lamp_stack_app:v1 privileged: true build: context: path_to_code dockerfile: dockerfile-lamp-stack.dockerfile container_name: app_cont networks: - lamp-stack-net ports: - \"8010:80\" volumes: - path_to_code/:/var/www/html/ mysql_service: image: mysql:5.7.25 container_name: mysql_cont ports: - \"3306:3306\" environment: # MYSQL_ROOT_PASSWORD: '' # MYSQL_ALLOW_EMPTY_PASSWORD : 'yes' MYSQL_ROOT_PASSWORD: root MYSQL_DATABASE: test_db MYSQL_USER: test_user MYSQL_PASSWORD: test@123 networks: - lamp-stack-net restart: always volumes: - path_to_dump_file/:/home/ - mysql_storage_01:/var/lib/mysql In the above docker-compose file we are building the LAMP Stack container and MYSQL container. For the lamp_stack service we need to give the context of the code and place the dockerfile at that loaction in order to build our LAMP Stack image. We are exposing the port 8010 where the application will be served on the browser. Next is mysql_service, where we are creating the mysql container by using MYSQL 5.7 version. In the volumes section we have to use the location to our source code and database dump file respectively on line 25 and 43 respectively. Use the below commands to create network and volumes respectively: docker network create lamp-stack-net docker volume create --name=mysql_storage_01 Now let us create the containers using the below command: docker-compose -f docker-compose-lamp-stack.yml up -d Now check if both the containers are up and running using the below command: docker ps If both the containers are up and running then check on the browser using: \u003cIP\u003e:8010 or localhost:8010 This will serve the default page on the browser. To connect to the database you will need to use the database details in your php config file. Hope this article was helpful. Happy Learing!!! Vrinda Hegde is a DevOps Engineer, who likes to explore orchestration tools and automate the process of deploying containerized applications. She likes to share her findings by writing articles on medium.com. She can be reached out on LinkedIn or via email ","date":"2022-06-06","objectID":"/dockerizing_lamp_stack_app/:1:0","tags":["How-to","docker","blog","lamp stack","VisitingAuthors","technology"],"title":"Dockerizing LAMP Stack Application","uri":"/dockerizing_lamp_stack_app/"}]